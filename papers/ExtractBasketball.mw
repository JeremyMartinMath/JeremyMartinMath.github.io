<?xml version="1.0" encoding="UTF-8"?>
<Worksheet><Version major="6" minor="1"/><View-Properties><Zoom percentage="150"/></View-Properties><Styles><Layout alignment="left" bullet="none" linespacing="0.0" name="Heading 1" spaceabove="8.0" spacebelow="4.0"/><Layout alignment="left" bullet="none" firstindent="0.0" leftmargin="0.0" linebreak="space" linespacing="0.0" name="Normal" rightmargin="0.0" spaceabove="0.0" spacebelow="0.0"/><Layout alignment="centred" bullet="none" linespacing="0.5" name="Maple Output"/><Font background="[0,0,0]" bold="true" executable="true" family="Monospaced" foreground="[255,0,0]" name="Maple Input" opaque="false" size="12"/><Font background="[0,0,0]" family="Monospaced" foreground="[0,0,255]" name="Line Printed Output" opaque="false" readonly="true" size="12"/><Font background="[0,0,0]" bold="true" family="Serif" name="Heading 1" opaque="false" size="18"/><Font background="[0,0,0]" family="Lucida Bright" foreground="[0,0,255]" name="2D Output" opaque="false" readonly="true" size="12"/></Styles><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">with(networks): with(plots):
cis := theta -&gt; cos(theta) + I*sin(theta):
FF := L -&gt; (z-&gt;mul(z-cis(theta),theta=L)):</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">ExtractBasketball := proc(theta,f,NumPts,VERBOSE)
  global cis:
  local x,y,z,n,r,arg,i,j,C,Unmatched,pair,count,ii,
  RealCurve,RealPts,RealEndPts,RealN,RealV,RealE,RealG,RealC,RealComponents,RealMatching,
    RealLo,RealHi,RealDelta,RealDSquared,
  ImagCurve,ImagPts,ImagEndPts,ImagN,ImagV,ImagE,ImagG,ImagC,ImagComponents,ImagMatching,
    ImagLo,ImagHi,ImagDelta,ImagDSquared:

  assume(x,real): assume(y,real):
  forget(RealDSquared):
  forget(ImagDSquared):
  n := degree(f(z),z):
  r := 5/4 * max(op(map(abs,[fsolve(f(z)=0,z,complex)]))):  ## this may need to be adjusted
  if VERBOSE then printf("r=%a\n",r) fi;
  arg := proc(Z)  ## argument function of Z=[X,Y] with range [0,2*Pi)
    if Z[2]&gt;=0 then argument(Z[1]+I*Z[2])
    else 2*Pi+argument(Z[1]+I*Z[2]) fi:
  end:

############################## real part ##############################
  if VERBOSE then printf("Starting real phase....\n") fi:

  RealCurve := Re(expand(cis(theta)*f(x+I*y))):
  RealPts := ListTools[Flatten]( [op(op(1,implicitplot(RealCurve=0, x=-r..r, y=-r..r, numpoints=NumPts)))], 1 ):
  RealPts := subsop(nops(RealPts)=NULL,RealPts):  ## to get rid of garbage from the PLOTS data structure

  RealEndPts := [RootFinding[BivariatePolynomial]({evalf(RealCurve),x^2+y^2-r^2}, [x,y])]:
  RealEndPts := map( Z-&gt;map(Re,Z), RealEndPts);
  RealEndPts := sort( RealEndPts, (a,b) -&gt; evalb(evalf(arg(a))&lt;evalf(arg(b))) ):

  RealPts := [op(RealEndPts), op(RealPts)]:
  RealN := nops(RealPts):
  RealV := [seq(i,i=1..RealN)]:
  if VERBOSE then printf("Number of vertices = %d\n",RealN) fi;
  RealLo := 0.:
  RealHi := evalf(r):
  RealC := 0:
  count := 0:
  RealDSquared := proc(i,j) option remember:
    (RealPts[i][1]-RealPts[j][1])^2 + (RealPts[i][2]-RealPts[j][2])^2
  end:

  while RealC &lt;&gt; n do
    count := count+1:
    RealDelta := (RealLo+RealHi)/2:
    RealE := {}:
    for i from 1 to RealN-1 do for j from i+1 to RealN do
      if RealDSquared(i,j) &lt; RealDelta^2 then RealE := RealE union {{i,j}}
    fi od od:
    RealG := graph(RealV,RealE):
    RealC := nops(components(RealG)):
    if VERBOSE then printf("  Iteration %d: delta = %a..%a, cpts=%d\n",
         count, RealLo,RealHi,RealC) fi:
    if RealC &gt; n then RealLo := RealDelta
    elif RealC &lt; n then RealHi := RealDelta
    fi:
  od:

  RealComponents := components(RealG):
  RealMatching := {}:
  Unmatched := {seq(j,j=1..2*n)}:
  for C in RealComponents do
    pair := {}:
    for i in Unmatched do if member(i,C) then pair := pair union {2*(i-1)} fi od:
    RealMatching := RealMatching union {pair}
  od:

############################## imaginary part ##############################
  if VERBOSE then printf("Starting imaginary phase....\n") fi:

  ImagCurve := Im(expand(cis(theta)*f(x+I*y))):
  ImagPts := ListTools[Flatten]( [op(op(1,implicitplot(ImagCurve=0, x=-r..r, y=-r..r, numpoints=NumPts)))], 1 ):
  ImagPts := subsop(nops(ImagPts)=NULL,ImagPts):  ## to get rid of garbage from the PLOTS data structure

  ImagEndPts := [RootFinding[BivariatePolynomial]({evalf(ImagCurve),x^2+y^2-r^2}, [x,y])]:
  ImagEndPts := map( Z-&gt;map(Re,Z), ImagEndPts);
  ImagEndPts := sort( ImagEndPts, (a,b) -&gt; evalb(evalf(arg(a))&lt;evalf(arg(b))) ):
  ImagPts := [op(ImagEndPts), op(ImagPts)]:
  ImagN := nops(ImagPts):
  ImagV := [seq(i,i=1..ImagN)]:
  if VERBOSE then printf("Number of vertices = %d\n",ImagN) fi;
  ImagLo := 0.:
  ImagHi := evalf(r):
  ImagC := 0:
  count := 0:
  ImagDSquared := proc(i,j) option remember:
    (ImagPts[i][1]-ImagPts[j][1])^2 + (ImagPts[i][2]-ImagPts[j][2])^2
  end:

  while ImagC &lt;&gt; n do
    count := count+1:
    ImagDelta := (ImagLo+ImagHi)/2:
    ImagE := {}:
    for i from 1 to ImagN-1 do for j from i+1 to ImagN do
      if ImagDSquared(i,j) &lt; ImagDelta^2 then ImagE := ImagE union {{i,j}}
    fi od od:
    ImagG := graph(ImagV,ImagE):
    ImagC := nops(components(ImagG)):
    if VERBOSE then printf("  Iteration %d: delta = %a..%a, cpts=%d\n",
         count, ImagLo,ImagHi,ImagC) fi:
    if ImagC &gt; n then ImagLo := ImagDelta
    elif ImagC &lt; n then ImagHi := ImagDelta
    fi:
  od:

  ImagComponents := components(ImagG):
  ImagMatching := {}:
  Unmatched := {seq(j,j=1..2*n)}:

  ## set up the indexing correctly
  if arg(RealEndPts[1]) &lt; arg(ImagEndPts[1]) then
    ii := j-&gt;(2*j-1)
  else
    ii := j-&gt;((2*j-3) mod (4*n)) fi:
  for C in ImagComponents do
    pair := {}:
    for i in Unmatched do if member(i,C) then pair := pair union {ii(i)} fi od:
    ImagMatching := ImagMatching union {pair}
  od:

  [RealMatching, ImagMatching]:
end:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">ExtractBasketball(0, z-&gt;z^2+2*I*z+4-3*I, 100, true);</Text-field></Input><Output><Text-field layout="Normal" style="Line Printed Output">r=4.236225275
Starting real phase....
Number of vertices = 82</Text-field></Output><Output><Text-field layout="Normal" style="Line Printed Output">  Iteration 1: delta = 0...4.236225275, cpts=2
Starting imaginary phase....
Number of vertices = 60
  Iteration 1: delta = 0...4.236225275, cpts=2</Text-field><Text-field layout="Maple Output" style="2D Output"><Equation>NiM3JDwkPCQiIiEiIiM8JCIiJSIiJzwkPCQiIiQiIiY8JCIiIiIiKA==</Equation></Text-field></Output></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">## this is the cubic F([0,1,2])
ExtractBasketball(0, z-&gt;(z-1)*(z-cos(1)-I*sin(1))*(z-cos(2)-I*sin(2)), 1000, true);</Text-field></Input></Group><Section><Title><Text-field layout="Heading 1" style="Heading 1">Quartics</Text-field></Title><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">NNN := 500: Verbose := false:

BB := ExtractBasketball(0.5, FF([0, Pi/7, 5*Pi/7, 6*Pi/7]), NNN, Verbose);  ## type B
BA := ExtractBasketball(0.5, FF([0, Pi/7, 6*Pi/7, Pi]), NNN, Verbose);  ## type A
BE := ExtractBasketball(0.1, FF([0, 0.3, 0.4, 3.0]), NNN, Verbose);  ## type E
BH := ExtractBasketball(0.1, FF([0, 0.1, 0.2, 0.3]), NNN, Verbose);  ## type H
BD := ExtractBasketball(0.1, FF([0, 0.9, 1, 3.0]), NNN, Verbose);  ## type D
BG := ExtractBasketball(0.2, FF([0, Pi/8, 2*Pi/8, 3*Pi/8]), NNN, Verbose);  ## type G</Text-field></Input><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BF := ExtractBasketball(1.5, FF([0, Pi/8, 2*Pi/8, 3*Pi/8]), NNN, Verbose);  ## type F
</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">NNN := 2000: Verbose := true:</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BB := ExtractBasketball(0.5, FF([0, Pi/7, 5*Pi/7, 6*Pi/7]), NNN, Verbose);  ## type B</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BA := ExtractBasketball(0.5, FF([0, Pi/7, 6*Pi/7, Pi]), NNN, Verbose);  ## type A</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BE := ExtractBasketball(0.1, FF([0, 0.3, 0.4, 3.0]), NNN, Verbose);  ## type E</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BH := ExtractBasketball(0.1, FF([0, 0.1, 0.2, 0.3]), NNN, Verbose);  ## type H</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BD := ExtractBasketball(0.1, FF([0, 0.9, 1, 3.0]), NNN, Verbose);  ## type D</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BG := ExtractBasketball(0.2, FF([0, Pi/8, 2*Pi/8, 3*Pi/8]), NNN, Verbose);  ## type G</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input">BF := ExtractBasketball(1.5, FF([0, Pi/8, 2*Pi/8, 3*Pi/8]), NNN, Verbose);  ## type F</Text-field></Input></Group><Group><Input><Text-field layout="Normal" prompt="&gt; " style="Maple Input"/></Input></Group></Section><Text-field/><Text-field/><Text-field/><Text-field/></Worksheet>